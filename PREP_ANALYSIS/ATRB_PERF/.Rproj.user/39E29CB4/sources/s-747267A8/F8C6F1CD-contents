library(tidyverse)

###
### Review
###

gsodi_long <- read_csv("gsodi_long.csv")


### Exploring the dataframe

### Find all of the variable names
names(gsodi_long)

### Look at the data like in Excel
View(gsodi_long)

### Summary of the dataframe (more complex)
str(gsodi_long)

### Dimensions of dataframe (rows by columns)
dim(gsodi_long)

### Top of the dataframe
head(gsodi_long)

### Bottom of the data frame 
tail(gsodi_long)


### Filtering and Selecting

### Works the same as in excel but you type it out! 

filter(.data = gsodi_long, ID_year == 2018)

filter(gsodi_long, ID_year == 2018, ID_country_name == "Honduras")

filter(gsodi_long, ID_year == 2018 & neg_sig_10_years == 1  | ID_year == 2018 & neg_sig_5_years == 1)

filter(gsodi_long, 
       ID_variable_name == "Representative Government",
       ID_year < 2000 & ID_year >= 1990, 
       value >= 0.50, 
       neg_sig_5_years == 1)

### Selecting
# What do you actually need to look at? 

select(gsodi_long, value)

# Selecting allows you to select variables.

select(gsodi_long, ID_year, ID_country_name, ID_region_name, ID_variable_name, value)
select(gsodi_long, ID_year, ID_country_name, ID_region_name, ID_variable_name, value, regime_status_name)

### The pipe function


# The pipe %>% (shft-ctrl-m) 

# What the pipe does is it takes the output of the function on the 
# left and feeds it to the right function as its first argument.

# Or in english "do this and then this"

# Filter and then select
filter(gsodi_long, ID_year == 2018, ID_country_name == "Honduras") %>% # Do this...
  select(ID_year, ID_year, ID_country_name, ID_region_name, ID_variable_name, value) # then this. 


# Transforming variables in dplyr
# Making new variables! through mutate()
# mutate() works like this mutate(df, new_variable = (operation for new variable))

gsodi_long %>% 
  mutate(above_index = above_world_average + above_region_average) %>%  # Create the new variable, in this case just adding some flags for if a country is above or below the global average
  select(ID_year, ID_year, ID_country_name, ID_region_name, ID_variable_name, 
         value, above_index, above_world_average, above_region_average) %>% # Select relevant variables 
  arrange(desc(above_index)) # Arrange by new variable above_index

# IMPORTANT! group_by function

# This is how you would create for regional averages

regional_value_mutate_df <- gsodi_long %>% 
  group_by(ID_year, ID_variable_name, ID_region_name) %>% # Perform next operations by year, variable and region
  mutate(regional_value_joe = mean(value, na.rm = TRUE))%>%  # mean is the function for average
  select(ID_year, ID_year, ID_country_name, ID_region_name, ID_variable_name, 
         value, regional_value_joe, region_value)

filter(regional_value_mutate_df, ID_year == 2018, 
       ID_region_name == "Europe",
       ID_variable_name == "Clean Elections")

# We used group_by(ID_year,ID_variable_name, ID_region_name)



# Summarize data 
# Like mutate but collapses or distills the output of the group

# Compare the summarized operation with the mutated operation 

regional_value_summarize_df<- gsodi_long %>% 
  group_by(ID_year, ID_variable_name, ID_region_name) %>% # Perform next operations by year, variable and region
  summarize(regional_value_joe = mean(value, na.rm = TRUE))

# What is the difference between these two data frames? 

regional_value_summarize_df
regional_value_mutate_df

# Both mutate and summarize can make multiple new variable . 

gsodi_long %>% 
  group_by(ID_year, ID_variable_name, ID_region_name) %>% # Perform next operations by year, variable and region
  summarize(regional_value_joe = mean(value, na.rm = TRUE),
            regional_min = min(value, na.rm = TRUE),
            regional_max = max(value, na.rm = TRUE))

###
### Democratic Performance Patterns Analysis
###

###
# For the democratic performance patterns analysis we use a different datasheet from the usual "long" gsodi
# dataset.
#
# This is because the unit of measurment wouldn't work on the other dataframe where we are looking at
# Country-Variable-Year cases. 
###

gsodi_dem_patterns <- read_csv("gsodi_dem_patterns.csv")

# ASSIGNMENT: Explore this new dataset. What do you notice about how the data is organized? 

#(go over together)


#ASSIGNMENT: How many different combinations of democratic performance levels exist in LAC in 2018?
# What is the most common democratic combination? 


# Using the count() function which simply counts the number of observations
# Example of count
# Count the number of countries in the dataset

count(gsodi_dem_patterns, ID_country_name, name = "num_countries") 

# count(x = dataframe, variables to group by, name of count variable)

# Use **some/all** of functions count(), group_by(), filter(), summarize(), group_by() 
# to find out the number of unique dem performance levels in LAC in 2018 
# Multiple ways to solve! 

# Solution 1: First filtering for LAC
filter(gsodi_dem_patterns, 
       ID_region_name == "Latin America and the Caribbean" ) %>% 
  count(dem_perf_pattern, name = "num_countries") 

# More countries than in LAC, why?
# Did not filter for year! 
filter(gsodi_dem_patterns,  
       ID_region_name == "Latin America and the Caribbean", 
       ID_year == 2018) %>% 
  count(dem_perf_pattern, name = "num_countries") 

# Arrange to make more digesitble and save as an object. 

lac_dem_patterns_2018_summarized <- filter(gsodi_dem_patterns,
                                           ID_region_name == "Latin America and the Caribbean",
                                           ID_year == 2018) %>% 
  count(dem_perf_pattern, name = "num_countries") %>% 
  arrange(desc(num_countries))

# What is the unique number of democracy patterns in LAC?
# Two ways of identifying.

# Since count() only looks at unique cases to count, we can just look at the number of rows in the df

nrow(lac_dem_patterns_2018_summarized)

# Alternativly using the unique() function

lac_2018_df <- filter(gsodi_dem_patterns, 
                      ID_region_name == "Latin America and the Caribbean", 
                      ID_year == 2018) 

unique(lac_2018_df$dem_perf_pattern)


### Solution 2: More elegant solution to looking at # of patterns by region

dem_pattern_counts_by_region <- gsodi_dem_patterns %>% 
  group_by(ID_year, ID_region_name) %>% 
  count(dem_perf_pattern,
        name = "pattern_count")

### Why is this more elegant? 

### More advanced, adding percentage of region to dataframe. 
# Make table to find country count per region (ignoring perf patterns)
region_country_count <- gsodi_dem_patterns %>% 
  group_by(ID_year, ID_region_name) %>%
  count(ID_region_name,
        name = "num_countries")

# Join tables together and mutate a new variable called "percent_pattern"

dem_pattern_counts_by_region_percent <- left_join(region_country_count, dem_pattern_counts_by_region) %>% 
  mutate(percent_pattern = pattern_count/num_countries)

filter(dem_pattern_counts_by_region_percent, 
       ID_region_name == "Latin America and the Caribbean",
       ID_year == 2018) %>% 
  arrange(desc(percent_pattern))

# ASSIGNMENT: Which countries scored high on all five attributes in 1975?
# Use variable high_atrbs 
# Try doing an "elegant solution" 



#ASSIGNMENT: 
# How many countries performed low, mid-range and high on Participatory Engagement per region in 2018?
#Use variable A_05c







# Which countries scored high on all five attributes in 1975?
# Use variable high_atrbs 



#How many countries became democracies in 1975-2018?

#Which countries have not been classified as democracies in 1975-2018?


###
### GSODI Indices scores analysis 
###

# Average levels of Absence of Corruption by political regime type in Asia Pacific

# Which region of the world has improved the most on Gender Equality since 1975?

# How many countries have more than 30% of female legislators, in % of the total number of countries per region?

# Which regions have seen most declines in the individual dimensions of civic space? Bar graph and table
